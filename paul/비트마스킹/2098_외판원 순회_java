import java.io.*;
import java.util.*;

public class Main {
    private static int INF = 16 * 1000000;
    static int n;
    static int arr[][];
    static int dp[][];

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        n = Integer.parseInt(br.readLine());
        arr = new int[n][n];
        dp = new int[n][(1 << n) - 1];

        for(int i = 0 ; i < n; i++) Arrays.fill(dp[i], INF);

        for(int i = 0 ; i < n ; i++){
            StringTokenizer st = new StringTokenizer(br.readLine());
            for(int j = 0; j < n; j++){
                int value = Integer.parseInt(st.nextToken());
                arr[i][j] = value;
            }
        }

        System.out.println(tsp(0,1));
    }

    private static int tsp(int node, int visit){
        if(visit == (1 << n) - 1){
            if(arr[node][0] == 0) return INF;
            return arr[node][0];
        }

        if(dp[node][visit] != INF) return dp[node][visit];

        for(int i = 0 ; i < n; i++){
            int next = visit | (1 << i);
            if(arr[node][i] == 0 || (visit & (1 << i)) != 0) continue;

            dp[node][visit] = Math.min(dp[node][visit], tsp(i, next) + arr[node][i]);
        }

        return dp[node][visit];
    }
}